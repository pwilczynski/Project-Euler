#!/usr/bin/python
# Copyright 2010 P. Wilczynski
# Project Euler
# Problem Number 14

import sys
import re
import math

"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?
"""

def isprime(startnumber):
    startnumber*=1.0
    for divisor in range(2,int(startnumber**0.5)+1):
        if startnumber/divisor==int(startnumber/divisor):
            return False
    return True

def gen_middle_factors(prime_seed, n):
    i = prime_seed
    if n<1:
        print 'INPROPER INPUT FOR PRIME GENERATION'
        return 0
    while 1:
        if isprime(i):
            if n%i==0:
                return int(i), int(n/i)
        i = i - 1

def produce_tri(n):
    tri = (n*n+n)/2
    return tri

def prime_factors(n):
    if isprime(n):
        return [int(n)]
    else:
        middle_factors_seed = math.floor(math.sqrt(n))
        f1,f2 = gen_middle_factors(middle_factors_seed, n)
        factors = [f1, f2]
        #print factors
        if isprime(factors[1]):
            return factors
        else:
            a = prime_factors(factors.pop())
            factors.extend(a)
            return factors

def n_factors(prime_factors):
    prime_dict = {}
    for factor in prime_factors:
        if factor in prime_dict:
            continue
        else:
            prime_dict[factor]=prime_factors.count(factor)
    sum_facts=1
    for prime in prime_dict.keys():
        sum_facts= sum_facts *(1 + prime_dict[prime])
    return sum_facts


def triangle_nums(input_max):
    print "*****Triangle Numbers*****"
    i = 1
    b = 1
    while b<input_max:
        a = prime_factors(produce_tri(i))
        b = n_factors(a)
        print produce_tri(i), '\t\t\t', b
        i+=1
    
def main():
    number = long(sys.argv[1])
    triangle_nums(number)

if __name__ == '__main__':
    main()
